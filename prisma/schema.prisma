generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String     @unique @default(cuid())
  name           String?
  email          String     @id @unique
  emailVerified  DateTime?
  image          String?
  role           Role       @default(normal)
  registered_at  DateTime?  @default(now()) @db.Timestamptz(6)
  accounts       Account[]
  sessions       Session[]
}

model Artist {
  id    Int    @id @default(autoincrement())
  name  String @unique
  songs Song[]
}

model Song {
  id      Int    @id @default(autoincrement())
  title   String
  artist  Artist @relation(fields: [artistId], references: [id])
  artistId Int
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


enum Role {
  normal
  premium
  admin
}


